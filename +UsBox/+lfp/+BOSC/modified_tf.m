function [B,F,cycle_number]=modified_tf(eegsignal,F,Fsample,window_duration);% [B,T,F]=BOSC_tf(eegsignal,F,Fsample,wavenumber);%% This function computes a continuous wavelet (Morlet) transform on% a segment of EEG signal; this can be used to estimate the% background spectrum (BOSC_bgfit) or to apply the BOSC method to% detect oscillatory episodes in signal of interest (BOSC_detect).%% parameters:% eegsignal - a row vector containing a segment of EEG signal to be%             transformed% F - a set of frequencies to sample (Hz)% Fsample - sampling rate of the time-domain signal (Hz)% wavenumber is the size of the wavelet (typically, width=6)%	% returns:% B - time-frequency spectrogram: power as a function of frequency%     (rows) and time (columns)% T - vector of time values (based on sampling rate, Fsample)%window_duration = .2;%wavenumber = 6;%st=1./(2*pi*(F/wavenumber));B = zeros(length(F),length(eegsignal)); % initialize the time-frequency matrixcycle_number = zeros(1,length(F));% st = zeros(1,length(F));% A = zeros(1,length(F));parfor f=1:length(F) % loop through sampled frequencies cycle_number(f) = ceil(window_duration*F(f)); if cycle_number(f)<3     cycle_number(f) = 3; end if cycle_number(f)>10     cycle_number(f)=10; end  st=1./(2*pi*(F(f)/cycle_number(f)));  A=1./sqrt(st*sqrt(pi));  t=-3.6*st:(1/Fsample):3.6*st;  m=A*exp(-t.^2/(2*st^2)).*exp(1i*2*pi*F(f).*t); % Morlet wavelet  m = m/sum(abs(m));  y=conv(eegsignal,m); %y=abs(y).^2;%   F(f)%   temp(f) = sum(abs(m));%   if f==1%       sc = ones(1,length(m));% %       ct = ceil(length(sc)/2); % %       sc(ct) = 1;%       seg_amplitude = conv(eegsignal,sc);%       seg_amplitude = seg_amplitude(ceil(length(m)/2):length(seg_amplitude)-floor(length(m)/2));%   end  B(f,:)=y(ceil(length(m)/2):length(y)-floor(length(m)/2));% figure(20),plot(F(1:f),temp)end%T=(1:size(eegsignal,2))/Fsample;